// Code generated by MockGen. DO NOT EDIT.
// Source: dynamodb.go
//
// Generated by this command:
//
//	mockgen -source=dynamodb.go -destination=mocks/dynamodb_mock.go
//

// Package mock_dynamodb is a generated GoMock package.
package mock_dynamodb

import (
	context "context"
	reflect "reflect"

	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamoDbClient is a mock of DynamoDbClient interface.
type MockDynamoDbClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoDbClientMockRecorder
}

// MockDynamoDbClientMockRecorder is the mock recorder for MockDynamoDbClient.
type MockDynamoDbClientMockRecorder struct {
	mock *MockDynamoDbClient
}

// NewMockDynamoDbClient creates a new mock instance.
func NewMockDynamoDbClient(ctrl *gomock.Controller) *MockDynamoDbClient {
	mock := &MockDynamoDbClient{ctrl: ctrl}
	mock.recorder = &MockDynamoDbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoDbClient) EXPECT() *MockDynamoDbClientMockRecorder {
	return m.recorder
}

// AddRow mocks base method.
func (m *MockDynamoDbClient) AddRow(arg0 context.Context, arg1 any) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRow", arg0, arg1)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRow indicates an expected call of AddRow.
func (mr *MockDynamoDbClientMockRecorder) AddRow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRow", reflect.TypeOf((*MockDynamoDbClient)(nil).AddRow), arg0, arg1)
}

// DeleteRow mocks base method.
func (m *MockDynamoDbClient) DeleteRow(arg0 context.Context, arg1 map[string]types.AttributeValue) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRow", arg0, arg1)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRow indicates an expected call of DeleteRow.
func (mr *MockDynamoDbClientMockRecorder) DeleteRow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRow", reflect.TypeOf((*MockDynamoDbClient)(nil).DeleteRow), arg0, arg1)
}

// ReadRow mocks base method.
func (m *MockDynamoDbClient) ReadRow(arg0 context.Context, arg1 map[string]types.AttributeValue) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRow", arg0, arg1)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRow indicates an expected call of ReadRow.
func (mr *MockDynamoDbClientMockRecorder) ReadRow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRow", reflect.TypeOf((*MockDynamoDbClient)(nil).ReadRow), arg0, arg1)
}

// UpdateRow mocks base method.
func (m *MockDynamoDbClient) UpdateRow(arg0 context.Context, arg1 map[string]types.AttributeValue, arg2 expression.UpdateBuilder) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRow", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRow indicates an expected call of UpdateRow.
func (mr *MockDynamoDbClientMockRecorder) UpdateRow(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRow", reflect.TypeOf((*MockDynamoDbClient)(nil).UpdateRow), arg0, arg1, arg2)
}
